{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "## Hacker Rank\n\nFor Thursdays you will be solving some selected challenges on HackerRank, please create an account if you don't have then\nFollow the links below:\nread them carefully and solve them then copy-paste your solution below in Code Block"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### **Required**:"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#####  [Birthday Cake Candles](https://www.hackerrank.com/challenges/birthday-cake-candles/problem?isFullScreen=true)\n\nSolution:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function (inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function () {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'birthdayCakeCandles' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY candles as parameter.\n */\n\nfunction birthdayCakeCandles(candles) {\n    // Write your code here\n    let bigNum = 0;\n    let candlesNum = 0;\n    for (let i=0; i<candles.length; i++) {\n        if (candles[i] > bigNum) {\n            // bigNum.push(candles[i]);\n            bigNum = candles[i];\n            candlesNum = 1;\n        }\n        else if(candles[i] === bigNum){\n            candlesNum++;\n        }\n    }\n    return candlesNum;\n\n    // return `Candle heights are [${candles}]. The tallest candles are ${bigNum} units, there are ${candlesNum}  of them.`;\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const candlesCount = parseInt(readLine().trim(), 10);\n\n    const candles = readLine().replace(/\\s+$/g, '').split(' ').map(candlesTemp => parseInt(candlesTemp, 10));\n\n    const result = birthdayCakeCandles(candles);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### **Optional**:"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#####  [Compare The Triplets](https://www.hackerrank.com/challenges/compare-the-triplets/problem?isFullScreen=true)\n\nSolution:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'compareTriplets' function below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n\nfunction compareTriplets(a, b) {\n    \n    let Alice = 0 ;\n    let Bob = 0 ;\n\n    if(a.length !== b.length) \n    {\n        return false;\n    }\n    else\n    {\n        for(let i=0 ; i<(a.length && b.length) ; i++ )\n    {\n        if(a[i] > b[i])\n        {\n            Alice++;\n        }\n        else if(a[i] < b[i])\n        {\n            Bob++;\n        }\n    }\n    \n    }\n    let points = [Alice , Bob];\n    return points ;\n\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const a = readLine().replace(/\\s+$/g, '').split(' ').map(aTemp => parseInt(aTemp, 10));\n\n    const b = readLine().replace(/\\s+$/g, '').split(' ').map(bTemp => parseInt(bTemp, 10));\n\n    const result = compareTriplets(a, b);\n\n    ws.write(result.join(' ') + '\\n');\n\n    ws.end();\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "#####  [Migratory Birds](https://www.hackerrank.com/challenges/migratory-birds/problem?isFullScreen=true)\n\nSolution:"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "'use strict';\n\nconst fs = require('fs');\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', function(inputStdin) {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', function() {\n    inputString = inputString.split('\\n');\n\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\n/*\n * Complete the 'migratoryBirds' function below.\n *\n * The function is expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY arr as parameter.\n */\n\nfunction migratoryBirds(arr) {\n    if (!arr || arr.length === 0) {\n        console.log(\"Input array is empty or undefined.\");\n        return -1; // Return an error code or handle accordingly\n    }\n\n    let typeCount = {};\n\n    for (let i = 0; i < arr.length; i++) {\n        let birdType = arr[i];\n\n        if (birdType !== undefined && birdType !== null && typeof birdType === 'number') {\n            typeCount[birdType] = (typeCount[birdType] || 0) + 1;\n        }\n    }\n\n    if (Object.keys(typeCount).length === 0) {\n        console.log(\"No valid bird types found in the input array.\");\n        return -1; \n    }\n\n    let maxCount = 0;\n    let mostTypeFreq = 0;\n\n    for (let type in typeCount) {\n        if (typeCount[type] > maxCount) {\n            maxCount = typeCount[type];\n            mostTypeFreq = Number(type);\n        }\n    }\n\n    console.log(\"Type Count: \", typeCount);\n\n    return mostTypeFreq;\n}\n\nfunction main() {\n    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);\n\n    const arrCount = parseInt(readLine().trim(), 10);\n\n    const arr = readLine().replace(/\\s+$/g, '').split(' ').map(arrTemp => parseInt(arrTemp, 10));\n\n    const result = migratoryBirds(arr);\n\n    ws.write(result + '\\n');\n\n    ws.end();\n}\n"
            ],
            "outputs": []
        }
    ]
}